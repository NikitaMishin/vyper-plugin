// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _BaseVyperLexer.flex

package org.vyperlang.plugin.grammar;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.vyperlang.plugin.psi.VyperTypes.*;


public class _BaseVyperLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\11\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\4\42"+
    "\1\44\5\42\1\45\1\46\3\42\1\47\2\42\1\50"+
    "\1\51\1\52\1\53\1\54\1\0\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\42\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\42\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\6\0\1\111\32\0\1\112\u01df\0"+
    "\1\112\177\0\13\112\35\0\2\111\5\0\1\112\57\0"+
    "\1\112\240\0\1\112\377\0\u0100\113";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\7\26\1\27\1\1\1\30\1\31\20\26\1\32\1\33"+
    "\1\34\1\35\1\2\1\0\1\36\1\0\1\37\1\0"+
    "\1\40\1\0\1\41\1\0\1\42\1\43\1\44\1\45"+
    "\1\0\1\46\1\0\1\47\2\0\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\6\26\1\57\2\26\1\60"+
    "\2\0\15\26\1\61\1\26\1\62\2\26\1\63\11\26"+
    "\1\37\1\0\1\64\1\0\1\65\1\66\7\26\1\67"+
    "\1\26\1\70\1\0\1\71\1\0\5\26\1\72\10\26"+
    "\1\73\7\26\1\74\1\26\1\75\15\26\1\0\4\26"+
    "\1\76\2\26\1\77\6\26\1\100\1\101\1\102\4\26"+
    "\1\103\1\104\1\0\5\26\1\105\3\26\1\106\2\26"+
    "\1\107\3\26\1\110\3\26\1\111\1\112\1\0\1\113"+
    "\5\26\1\114\1\115\4\26\1\116\3\26\1\0\12\26"+
    "\1\117\1\120\3\26\1\121\1\122\2\26\1\123\1\26"+
    "\1\124\1\125\2\26\1\126\3\26\1\127\2\26\1\130"+
    "\7\26\1\131\1\132\1\26\1\133\1\26\1\134\1\135"+
    "\2\26\1\136\1\137\3\26\1\140\5\26\1\141\1\26"+
    "\1\142\1\143\1\144\1\145\4\26\1\146\3\26\1\147"+
    "\2\26\1\150\3\26\1\151\1\26\1\152\1\26\1\153"+
    "\1\154\1\26\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\114"+
    "\0\u0214\0\114\0\114\0\u0260\0\u02ac\0\114\0\u02f8\0\u0344"+
    "\0\u0390\0\u03dc\0\u0428\0\u0474\0\114\0\u04c0\0\u050c\0\u0558"+
    "\0\114\0\114\0\u05a4\0\u05f0\0\u063c\0\u0688\0\u06d4\0\u0720"+
    "\0\u076c\0\114\0\u07b8\0\114\0\114\0\u0804\0\u0850\0\u089c"+
    "\0\u08e8\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0afc"+
    "\0\u0b48\0\u0b94\0\u0be0\0\u0c2c\0\u0c78\0\114\0\114\0\114"+
    "\0\114\0\u0cc4\0\u07b8\0\114\0\u0d10\0\u0d5c\0\u0da8\0\114"+
    "\0\u0214\0\114\0\u0df4\0\114\0\114\0\114\0\114\0\u0e40"+
    "\0\u0e8c\0\u0ed8\0\114\0\u0f24\0\u0f70\0\114\0\114\0\114"+
    "\0\114\0\114\0\114\0\114\0\u0fbc\0\u1008\0\u1054\0\u10a0"+
    "\0\u10ec\0\u1138\0\u07b8\0\u1184\0\u11d0\0\u121c\0\u1268\0\u12b4"+
    "\0\u1300\0\u134c\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514"+
    "\0\u1560\0\u15ac\0\u15f8\0\u1644\0\u1690\0\u05a4\0\u16dc\0\u1728"+
    "\0\u1774\0\u17c0\0\u05a4\0\u180c\0\u1858\0\u18a4\0\u18f0\0\u193c"+
    "\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\114\0\u1ab8\0\114\0\u1b04"+
    "\0\u1b04\0\u0f70\0\u1b50\0\u1b9c\0\u1be8\0\u1c34\0\u1c80\0\u1ccc"+
    "\0\u1d18\0\u05a4\0\u1d64\0\114\0\u1db0\0\114\0\u1dfc\0\u1e48"+
    "\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78\0\u05a4\0\u1fc4\0\u2010\0\u205c"+
    "\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u05a4\0\u2224\0\u2270"+
    "\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u23ec\0\u05a4\0\u2438\0\u05a4"+
    "\0\u2484\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c\0\u2698"+
    "\0\u26e4\0\u2730\0\u277c\0\u27c8\0\u2814\0\u2860\0\u28ac\0\u28f8"+
    "\0\u2944\0\u2990\0\u05a4\0\u29dc\0\u2a28\0\u05a4\0\u2a74\0\u2ac0"+
    "\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u05a4\0\u05a4\0\u05a4\0\u2c3c"+
    "\0\u2c88\0\u2cd4\0\u2d20\0\u05a4\0\u05a4\0\u2d6c\0\u2db8\0\u2e04"+
    "\0\u2e50\0\u2e9c\0\u2ee8\0\u2f34\0\u2f80\0\u2fcc\0\u3018\0\u05a4"+
    "\0\u3064\0\u30b0\0\u05a4\0\u30fc\0\u3148\0\u3194\0\u05a4\0\u31e0"+
    "\0\u322c\0\u3278\0\u05a4\0\u05a4\0\u32c4\0\u05a4\0\u3310\0\u335c"+
    "\0\u33a8\0\u33f4\0\u3440\0\u05a4\0\u05a4\0\u348c\0\u34d8\0\u3524"+
    "\0\u3570\0\u05a4\0\u35bc\0\u3608\0\u3654\0\u36a0\0\u36ec\0\u3738"+
    "\0\u3784\0\u37d0\0\u381c\0\u3868\0\u38b4\0\u3900\0\u394c\0\u3998"+
    "\0\u05a4\0\u05a4\0\u39e4\0\u3a30\0\u3a7c\0\u3278\0\114\0\u3ac8"+
    "\0\u3b14\0\u05a4\0\u3b60\0\u05a4\0\u348c\0\u3bac\0\u3bf8\0\u05a4"+
    "\0\u3c44\0\u3c90\0\u3cdc\0\114\0\u3d28\0\u3d74\0\u05a4\0\u3dc0"+
    "\0\u3e0c\0\u3e58\0\u3ea4\0\u3ef0\0\u3f3c\0\u3f88\0\u05a4\0\u05a4"+
    "\0\u3fd4\0\u05a4\0\u4020\0\u05a4\0\u05a4\0\u406c\0\u40b8\0\u05a4"+
    "\0\u05a4\0\u4104\0\u4150\0\u419c\0\u05a4\0\u41e8\0\u4234\0\u4280"+
    "\0\u42cc\0\u4318\0\u05a4\0\u4364\0\u05a4\0\u05a4\0\u05a4\0\u05a4"+
    "\0\u43b0\0\u43fc\0\u4448\0\u4494\0\u05a4\0\u44e0\0\u452c\0\u4578"+
    "\0\u05a4\0\u45c4\0\u4610\0\u05a4\0\u465c\0\u46a8\0\u46f4\0\u05a4"+
    "\0\u4740\0\u05a4\0\u478c\0\u05a4\0\u05a4\0\u47d8\0\u05a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\33\1\35\1\33\1\36\1\33"+
    "\1\37\1\33\1\40\1\41\1\33\1\42\1\43\1\44"+
    "\1\45\1\33\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\33\1\54\1\55\1\33\1\56\1\33\1\57\1\60"+
    "\1\61\1\62\1\63\1\33\1\64\1\65\4\33\1\66"+
    "\1\67\1\70\1\71\2\72\1\2\115\0\4\3\44\0"+
    "\1\73\37\0\2\72\31\0\1\74\63\0\2\75\1\0"+
    "\1\75\1\0\1\75\1\76\42\75\1\77\42\75\2\6"+
    "\3\0\104\6\1\0\1\6\31\0\1\100\63\0\2\101"+
    "\1\0\1\101\1\0\5\101\1\102\36\101\1\103\42\101"+
    "\15\0\1\104\12\0\1\105\113\0\1\106\113\0\1\107"+
    "\104\0\1\110\1\0\2\111\27\0\1\112\67\0\1\113"+
    "\104\0\1\111\1\0\2\23\13\0\1\114\6\0\1\115"+
    "\4\0\1\23\4\0\1\114\20\0\1\115\32\0\1\111"+
    "\1\0\2\23\13\0\1\114\13\0\1\23\4\0\1\114"+
    "\62\0\1\116\112\0\1\117\1\120\113\0\1\121\1\122"+
    "\112\0\1\123\1\124\105\0\2\33\7\0\14\33\4\0"+
    "\31\33\32\0\2\33\7\0\14\33\4\0\27\33\1\125"+
    "\1\33\32\0\2\33\7\0\14\33\4\0\27\33\1\126"+
    "\1\33\32\0\2\33\7\0\14\33\4\0\1\33\1\127"+
    "\27\33\32\0\2\33\7\0\14\33\4\0\1\33\1\130"+
    "\27\33\32\0\2\33\7\0\14\33\4\0\22\33\1\131"+
    "\6\33\32\0\2\33\7\0\14\33\4\0\20\33\1\132"+
    "\10\33\10\0\1\73\1\133\2\73\132\0\2\33\7\0"+
    "\14\33\4\0\4\33\1\134\10\33\1\135\3\33\1\136"+
    "\7\33\15\0\1\137\3\0\1\140\10\0\2\33\7\0"+
    "\14\33\4\0\16\33\1\141\1\33\1\142\6\33\1\143"+
    "\1\33\32\0\2\33\7\0\14\33\4\0\16\33\1\144"+
    "\12\33\32\0\2\33\7\0\14\33\4\0\5\33\1\145"+
    "\23\33\32\0\2\33\7\0\14\33\4\0\13\33\1\146"+
    "\1\33\1\147\6\33\1\150\1\33\1\151\2\33\32\0"+
    "\2\33\7\0\14\33\4\0\13\33\1\152\2\33\1\153"+
    "\1\33\1\154\10\33\32\0\2\33\7\0\14\33\4\0"+
    "\5\33\1\155\23\33\32\0\2\33\7\0\14\33\4\0"+
    "\6\33\1\156\5\33\1\157\1\160\13\33\32\0\2\33"+
    "\7\0\14\33\4\0\16\33\1\161\12\33\32\0\2\33"+
    "\7\0\14\33\4\0\16\33\1\162\12\33\32\0\2\33"+
    "\7\0\14\33\4\0\20\33\1\163\10\33\32\0\2\33"+
    "\7\0\14\33\4\0\1\33\1\164\21\33\1\165\5\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\166\3\33"+
    "\1\167\23\33\32\0\2\33\7\0\14\33\4\0\5\33"+
    "\1\170\14\33\1\171\6\33\32\0\2\33\7\0\14\33"+
    "\4\0\11\33\1\172\7\33\1\173\7\33\32\0\2\33"+
    "\7\0\14\33\4\0\11\33\1\174\17\33\10\0\4\72"+
    "\104\0\2\72\1\0\2\75\1\0\1\75\1\0\1\75"+
    "\1\175\42\75\1\77\42\75\6\0\1\176\105\0\2\75"+
    "\3\0\104\75\1\0\1\75\1\0\2\101\3\0\104\101"+
    "\1\0\1\101\22\0\1\177\115\0\2\111\13\0\1\114"+
    "\13\0\1\111\4\0\1\114\55\0\2\112\13\0\1\114"+
    "\13\0\1\112\4\0\1\114\50\0\1\200\1\0\1\200"+
    "\2\0\2\201\27\0\1\201\62\0\2\202\7\0\6\202"+
    "\12\0\7\202\54\0\2\33\7\0\14\33\4\0\22\33"+
    "\1\203\6\33\32\0\2\33\7\0\14\33\4\0\15\33"+
    "\1\204\13\33\32\0\2\33\7\0\14\33\4\0\13\33"+
    "\1\205\15\33\32\0\2\33\7\0\14\33\4\0\21\33"+
    "\1\206\7\33\32\0\2\33\7\0\14\33\4\0\20\33"+
    "\1\207\10\33\32\0\2\33\7\0\14\33\4\0\23\33"+
    "\1\210\5\33\32\0\2\33\7\0\14\33\4\0\4\33"+
    "\1\211\24\33\32\0\2\33\7\0\14\33\4\0\4\33"+
    "\1\212\24\33\32\0\2\33\7\0\14\33\4\0\21\33"+
    "\1\213\7\33\7\0\2\137\1\0\1\137\1\0\1\137"+
    "\1\214\42\137\1\215\42\137\2\140\1\0\1\140\1\0"+
    "\5\140\1\216\36\140\1\217\42\140\23\0\2\33\7\0"+
    "\14\33\4\0\16\33\1\220\4\33\1\221\5\33\32\0"+
    "\2\33\7\0\14\33\4\0\5\33\1\222\23\33\32\0"+
    "\2\33\7\0\14\33\4\0\22\33\1\223\6\33\32\0"+
    "\2\33\7\0\14\33\4\0\15\33\1\224\13\33\32\0"+
    "\2\33\7\0\14\33\4\0\6\33\1\225\10\33\1\226"+
    "\11\33\32\0\2\33\7\0\14\33\4\0\11\33\1\227"+
    "\7\33\1\230\7\33\32\0\2\33\7\0\14\33\4\0"+
    "\23\33\1\231\5\33\32\0\2\33\7\0\14\33\4\0"+
    "\5\33\1\232\23\33\32\0\2\33\7\0\14\33\4\0"+
    "\17\33\1\233\2\33\1\234\6\33\32\0\2\33\7\0"+
    "\14\33\4\0\1\33\1\235\27\33\32\0\2\33\7\0"+
    "\14\33\4\0\20\33\1\236\10\33\32\0\2\33\7\0"+
    "\14\33\4\0\16\33\1\237\12\33\32\0\2\33\7\0"+
    "\14\33\4\0\26\33\1\240\2\33\32\0\2\33\7\0"+
    "\14\33\4\0\14\33\1\241\2\33\1\242\11\33\32\0"+
    "\2\33\7\0\14\33\4\0\4\33\1\243\4\33\1\244"+
    "\10\33\1\245\6\33\32\0\2\33\7\0\14\33\4\0"+
    "\7\33\1\246\21\33\32\0\2\33\7\0\14\33\4\0"+
    "\15\33\1\247\4\33\1\250\6\33\32\0\2\33\7\0"+
    "\14\33\4\0\21\33\1\251\5\33\1\252\1\33\32\0"+
    "\2\33\7\0\14\33\4\0\2\33\1\253\15\33\1\254"+
    "\10\33\32\0\2\33\7\0\14\33\4\0\11\33\1\255"+
    "\3\33\1\256\13\33\32\0\2\33\7\0\14\33\4\0"+
    "\22\33\1\257\6\33\32\0\2\33\7\0\14\33\4\0"+
    "\13\33\1\260\15\33\32\0\2\33\7\0\14\33\4\0"+
    "\1\33\1\261\16\33\1\262\10\33\32\0\2\33\7\0"+
    "\14\33\4\0\15\33\1\263\13\33\32\0\2\33\7\0"+
    "\14\33\4\0\5\33\1\264\23\33\32\0\2\33\7\0"+
    "\14\33\4\0\5\33\1\265\23\33\7\0\6\176\1\266"+
    "\105\176\23\0\2\201\27\0\1\201\62\0\2\33\7\0"+
    "\14\33\4\0\5\33\1\267\23\33\32\0\2\33\7\0"+
    "\1\270\13\33\4\0\31\33\32\0\2\33\7\0\14\33"+
    "\4\0\21\33\1\210\7\33\32\0\2\33\7\0\14\33"+
    "\4\0\10\33\1\271\20\33\32\0\2\33\7\0\14\33"+
    "\4\0\11\33\1\272\17\33\32\0\2\33\7\0\14\33"+
    "\4\0\5\33\1\273\23\33\32\0\2\33\7\0\14\33"+
    "\4\0\20\33\1\274\10\33\32\0\2\33\7\0\14\33"+
    "\4\0\5\33\1\275\23\33\7\0\2\137\3\0\104\137"+
    "\1\0\1\137\1\0\2\140\3\0\104\140\1\0\1\140"+
    "\24\0\2\33\7\0\14\33\4\0\13\33\1\276\15\33"+
    "\32\0\2\33\7\0\14\33\4\0\15\33\1\277\13\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\300\27\33"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\301\23\33"+
    "\32\0\2\33\7\0\14\33\4\0\21\33\1\302\1\303"+
    "\6\33\32\0\2\33\7\0\14\33\4\0\13\33\1\304"+
    "\15\33\32\0\2\33\7\0\14\33\4\0\6\33\1\305"+
    "\22\33\32\0\2\33\7\0\14\33\4\0\5\33\1\306"+
    "\23\33\32\0\2\33\7\0\14\33\4\0\14\33\1\307"+
    "\14\33\32\0\2\33\7\0\14\33\4\0\15\33\1\310"+
    "\13\33\32\0\2\33\7\0\14\33\4\0\16\33\1\311"+
    "\12\33\32\0\2\33\7\0\14\33\4\0\3\33\1\312"+
    "\1\33\1\313\23\33\32\0\2\33\7\0\14\33\4\0"+
    "\7\33\1\314\21\33\32\0\2\33\7\0\14\33\4\0"+
    "\14\33\1\315\14\33\15\0\1\316\14\0\2\33\7\0"+
    "\14\33\4\0\31\33\32\0\2\33\7\0\14\33\4\0"+
    "\23\33\1\317\5\33\32\0\2\33\7\0\14\33\4\0"+
    "\13\33\1\320\2\33\1\321\12\33\32\0\2\33\7\0"+
    "\14\33\4\0\5\33\1\322\23\33\32\0\2\33\7\0"+
    "\14\33\4\0\22\33\1\323\6\33\32\0\2\324\7\0"+
    "\14\33\4\0\5\33\1\325\23\33\32\0\2\33\7\0"+
    "\14\33\4\0\17\33\1\326\1\327\10\33\32\0\2\33"+
    "\7\0\14\33\4\0\21\33\1\330\7\33\32\0\2\33"+
    "\7\0\14\33\4\0\1\33\1\331\27\33\32\0\2\33"+
    "\7\0\14\33\4\0\13\33\1\332\15\33\32\0\2\33"+
    "\7\0\14\33\4\0\5\33\1\333\23\33\32\0\2\33"+
    "\7\0\14\33\4\0\21\33\1\334\7\33\32\0\2\33"+
    "\7\0\14\33\4\0\7\33\1\335\21\33\32\0\2\33"+
    "\7\0\14\33\4\0\23\33\1\336\5\33\32\0\2\33"+
    "\7\0\14\33\4\0\6\33\1\337\22\33\32\0\2\33"+
    "\7\0\14\33\4\0\22\33\1\340\6\33\32\0\2\33"+
    "\7\0\14\33\4\0\23\33\1\341\5\33\32\0\2\33"+
    "\7\0\14\33\4\0\22\33\1\342\6\33\32\0\2\33"+
    "\7\0\14\33\4\0\21\33\1\343\7\33\32\0\2\33"+
    "\7\0\14\33\4\0\25\33\1\344\3\33\7\0\6\176"+
    "\1\345\105\176\23\0\2\33\7\0\14\33\4\0\21\33"+
    "\1\346\7\33\32\0\2\33\7\0\14\33\4\0\20\33"+
    "\1\347\10\33\32\0\2\33\7\0\10\33\1\350\3\33"+
    "\4\0\31\33\32\0\2\33\7\0\14\33\4\0\15\33"+
    "\1\351\13\33\32\0\2\33\7\0\14\33\4\0\5\33"+
    "\1\352\23\33\32\0\2\33\7\0\14\33\4\0\20\33"+
    "\1\353\10\33\32\0\2\33\7\0\14\33\4\0\4\33"+
    "\1\354\24\33\32\0\2\33\7\0\14\33\4\0\12\33"+
    "\1\355\16\33\32\0\2\33\7\0\14\33\4\0\21\33"+
    "\1\356\7\33\32\0\2\33\7\0\14\33\4\0\22\33"+
    "\1\357\6\33\32\0\2\33\7\0\14\33\4\0\11\33"+
    "\1\360\17\33\32\0\2\33\7\0\14\33\4\0\16\33"+
    "\1\361\12\33\32\0\2\33\7\0\14\33\4\0\22\33"+
    "\1\362\6\33\32\0\2\33\7\0\14\33\4\0\20\33"+
    "\1\363\10\33\32\0\2\33\7\0\14\33\4\0\1\33"+
    "\1\364\27\33\32\0\2\33\7\0\14\33\4\0\20\33"+
    "\1\365\10\33\32\0\2\366\7\0\6\366\13\0\6\366"+
    "\54\0\2\33\7\0\14\33\4\0\22\33\1\367\6\33"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\370\23\33"+
    "\32\0\2\33\7\0\14\33\4\0\20\33\1\371\10\33"+
    "\32\0\2\33\7\0\14\33\4\0\26\33\1\372\2\33"+
    "\32\0\2\33\7\0\14\33\4\0\11\33\1\373\17\33"+
    "\32\0\2\324\7\0\14\33\4\0\31\33\32\0\2\33"+
    "\7\0\14\33\4\0\20\33\1\374\10\33\32\0\2\33"+
    "\7\0\14\33\4\0\1\33\1\375\27\33\32\0\2\33"+
    "\7\0\14\33\4\0\5\33\1\376\23\33\32\0\2\33"+
    "\7\0\14\33\4\0\2\33\1\377\26\33\32\0\2\33"+
    "\7\0\14\33\4\0\11\33\1\u0100\17\33\32\0\2\33"+
    "\7\0\14\33\4\0\5\33\1\u0101\23\33\32\0\2\33"+
    "\7\0\14\33\4\0\5\33\1\u0102\23\33\32\0\2\33"+
    "\7\0\14\33\4\0\20\33\1\u0103\10\33\32\0\2\33"+
    "\7\0\14\33\4\0\11\33\1\u0104\17\33\32\0\2\33"+
    "\7\0\14\33\4\0\3\33\1\u0105\25\33\32\0\2\u0106"+
    "\7\0\14\33\4\0\31\33\7\0\6\176\1\u0107\105\176"+
    "\23\0\2\33\7\0\14\33\4\0\20\33\1\u0108\10\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\u0109\27\33"+
    "\32\0\2\33\7\0\14\33\4\0\7\33\1\u010a\21\33"+
    "\32\0\2\33\7\0\14\33\4\0\21\33\1\u010b\7\33"+
    "\32\0\2\33\7\0\14\33\4\0\22\33\1\u010c\6\33"+
    "\32\0\2\u010d\7\0\14\33\4\0\31\33\32\0\2\33"+
    "\7\0\14\33\4\0\1\33\1\u010e\27\33\32\0\2\33"+
    "\7\0\14\33\4\0\15\33\1\u010f\13\33\32\0\2\33"+
    "\7\0\14\33\4\0\27\33\1\u0110\1\33\32\0\2\33"+
    "\7\0\14\33\4\0\22\33\1\u0111\6\33\32\0\2\33"+
    "\7\0\14\33\4\0\13\33\1\u0112\15\33\32\0\2\33"+
    "\7\0\14\33\4\0\15\33\1\u0113\13\33\15\0\1\u0114"+
    "\14\0\2\366\7\0\6\366\13\0\6\366\54\0\2\33"+
    "\7\0\14\33\4\0\1\33\1\u0115\27\33\32\0\2\33"+
    "\7\0\14\33\4\0\14\33\1\u0116\14\33\32\0\2\33"+
    "\7\0\14\33\4\0\22\33\1\u0117\6\33\32\0\2\33"+
    "\7\0\14\33\4\0\5\33\1\u0118\23\33\32\0\2\33"+
    "\7\0\14\33\4\0\1\33\1\u0119\27\33\32\0\2\33"+
    "\7\0\14\33\4\0\6\33\1\u011a\6\33\1\u011b\13\33"+
    "\32\0\2\33\7\0\14\33\4\0\27\33\1\u011c\1\33"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\u011d\23\33"+
    "\32\0\2\33\7\0\14\33\4\0\13\33\1\u011e\15\33"+
    "\32\0\2\33\7\0\14\33\4\0\3\33\1\u011f\25\33"+
    "\32\0\2\33\7\0\14\33\4\0\15\33\1\u0120\13\33"+
    "\32\0\2\33\7\0\14\33\4\0\3\33\1\u0121\25\33"+
    "\32\0\2\33\7\0\14\33\4\0\22\33\1\u0122\6\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\u0123\27\33"+
    "\32\0\2\33\7\0\14\33\4\0\17\33\1\u0124\11\33"+
    "\32\0\2\33\7\0\14\33\4\0\21\33\1\u0125\7\33"+
    "\32\0\2\33\7\0\14\33\4\0\15\33\1\u0126\13\33"+
    "\32\0\2\33\7\0\14\33\4\0\23\33\1\u0127\5\33"+
    "\32\0\2\33\7\0\14\33\4\0\21\33\1\u0128\7\33"+
    "\32\0\2\33\7\0\14\33\4\0\13\33\1\u0129\15\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\u012a\27\33"+
    "\32\0\2\33\7\0\14\33\4\0\2\33\1\u012b\26\33"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\u012c\23\33"+
    "\32\0\2\33\7\0\14\33\4\0\4\33\1\u012d\24\33"+
    "\32\0\2\33\7\0\14\33\4\0\13\33\1\u012e\15\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\u012f\27\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\u0130\27\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\u0131\27\33"+
    "\32\0\2\33\7\0\14\33\4\0\15\33\1\u0132\13\33"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\u0133\23\33"+
    "\32\0\2\33\7\0\14\33\4\0\3\33\1\u0134\25\33"+
    "\32\0\2\33\7\0\14\33\4\0\27\33\1\u0135\1\33"+
    "\32\0\2\33\7\0\14\33\4\0\22\33\1\u0136\6\33"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\u0137\23\33"+
    "\32\0\2\33\7\0\14\33\4\0\13\33\1\u0138\15\33"+
    "\32\0\2\33\7\0\14\33\4\0\13\33\1\u0139\15\33"+
    "\32\0\2\33\7\0\14\33\4\0\15\33\1\u013a\13\33"+
    "\32\0\2\33\7\0\14\33\4\0\11\33\1\u013b\17\33"+
    "\32\0\2\33\7\0\14\33\4\0\3\33\1\u013c\25\33"+
    "\32\0\2\33\7\0\14\33\4\0\13\33\1\u013d\15\33"+
    "\32\0\2\33\7\0\14\33\4\0\2\33\1\u013e\26\33"+
    "\32\0\2\33\7\0\14\33\4\0\22\33\1\u013f\6\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\u0140\27\33"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\u0141\23\33"+
    "\32\0\2\33\7\0\14\33\4\0\22\33\1\u0142\6\33"+
    "\32\0\2\33\7\0\14\33\4\0\30\33\1\u0143\32\0"+
    "\2\33\7\0\14\33\4\0\5\33\1\u0144\23\33\32\0"+
    "\2\33\7\0\14\33\4\0\13\33\1\u0145\15\33\32\0"+
    "\2\33\7\0\14\33\4\0\20\33\1\u0146\10\33\32\0"+
    "\2\33\7\0\14\33\4\0\13\33\1\u0147\15\33\32\0"+
    "\2\33\7\0\14\33\4\0\21\33\1\u0148\7\33\32\0"+
    "\2\33\7\0\14\33\4\0\5\33\1\u0149\23\33\32\0"+
    "\2\33\7\0\14\33\4\0\5\33\1\u014a\23\33\32\0"+
    "\2\33\7\0\14\33\4\0\1\33\1\u014b\27\33\32\0"+
    "\2\33\7\0\14\33\4\0\13\33\1\u014c\15\33\32\0"+
    "\2\33\7\0\14\33\4\0\21\33\1\u014d\7\33\32\0"+
    "\2\33\7\0\14\33\4\0\15\33\1\u014e\13\33\32\0"+
    "\2\33\7\0\14\33\4\0\22\33\1\u014f\6\33\7\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[18468];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\1\1\2\11\2\1\1\11"+
    "\6\1\1\11\3\1\2\11\7\1\1\11\1\1\2\11"+
    "\20\1\4\11\1\1\1\0\1\11\1\0\1\1\1\0"+
    "\1\11\1\0\1\11\1\0\4\11\1\0\1\1\1\0"+
    "\1\11\2\0\7\11\12\1\2\0\34\1\1\11\1\0"+
    "\1\11\1\0\13\1\1\11\1\0\1\11\1\0\46\1"+
    "\1\0\27\1\1\0\26\1\1\0\20\1\1\0\20\1"+
    "\1\11\14\1\1\11\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _BaseVyperLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BaseVyperLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 110: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 111: break;
          case 3:
            { return COMMENT;
            }
          // fall through
          case 112: break;
          case 4:
            { return PERCENT;
            }
          // fall through
          case 113: break;
          case 5:
            { return AMPERSAND;
            }
          // fall through
          case 114: break;
          case 6:
            { return LPAREN;
            }
          // fall through
          case 115: break;
          case 7:
            { return RPAREN;
            }
          // fall through
          case 116: break;
          case 8:
            { return MULT;
            }
          // fall through
          case 117: break;
          case 9:
            { return PLUS;
            }
          // fall through
          case 118: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 119: break;
          case 11:
            { return MINUS;
            }
          // fall through
          case 120: break;
          case 12:
            { return DOT;
            }
          // fall through
          case 121: break;
          case 13:
            { return DIV;
            }
          // fall through
          case 122: break;
          case 14:
            { return DECIMALNUMBER;
            }
          // fall through
          case 123: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 124: break;
          case 16:
            { return SEMICOLON;
            }
          // fall through
          case 125: break;
          case 17:
            { return LESS;
            }
          // fall through
          case 126: break;
          case 18:
            { return ASSIGN;
            }
          // fall through
          case 127: break;
          case 19:
            { return MORE;
            }
          // fall through
          case 128: break;
          case 20:
            { return QUESTION;
            }
          // fall through
          case 129: break;
          case 21:
            { return DECORATOR;
            }
          // fall through
          case 130: break;
          case 22:
            { return IDENTIFIER;
            }
          // fall through
          case 131: break;
          case 23:
            { return LBRACKET;
            }
          // fall through
          case 132: break;
          case 24:
            { return RBRACKET;
            }
          // fall through
          case 133: break;
          case 25:
            { return CARET;
            }
          // fall through
          case 134: break;
          case 26:
            { return LBRACE;
            }
          // fall through
          case 135: break;
          case 27:
            { return PIPE;
            }
          // fall through
          case 136: break;
          case 28:
            { return RBRACE;
            }
          // fall through
          case 137: break;
          case 29:
            { return TILDE;
            }
          // fall through
          case 138: break;
          case 30:
            { return NEQ;
            }
          // fall through
          case 139: break;
          case 31:
            { return STRINGLITERALDOUBLE;
            }
          // fall through
          case 140: break;
          case 32:
            { return PERCENT_ASSIGN;
            }
          // fall through
          case 141: break;
          case 33:
            { return STRINGLITERALSINGLE;
            }
          // fall through
          case 142: break;
          case 34:
            { return EXPONENT;
            }
          // fall through
          case 143: break;
          case 35:
            { return MULT_ASSIGN;
            }
          // fall through
          case 144: break;
          case 36:
            { return PLUS_ASSIGN;
            }
          // fall through
          case 145: break;
          case 37:
            { return MINUS_ASSIGN;
            }
          // fall through
          case 146: break;
          case 38:
            { return FIXEDNUMBER;
            }
          // fall through
          case 147: break;
          case 39:
            { return DIV_ASSIGN;
            }
          // fall through
          case 148: break;
          case 40:
            { return WALRUS;
            }
          // fall through
          case 149: break;
          case 41:
            { return LSHIFT;
            }
          // fall through
          case 150: break;
          case 42:
            { return LESSEQ;
            }
          // fall through
          case 151: break;
          case 43:
            { return EQ;
            }
          // fall through
          case 152: break;
          case 44:
            { return TO;
            }
          // fall through
          case 153: break;
          case 45:
            { return MOREEQ;
            }
          // fall through
          case 154: break;
          case 46:
            { return RSHIFT;
            }
          // fall through
          case 155: break;
          case 47:
            { return BREAK_LINE;
            }
          // fall through
          case 156: break;
          case 48:
            { return AS;
            }
          // fall through
          case 157: break;
          case 49:
            { return IF;
            }
          // fall through
          case 158: break;
          case 50:
            { return IN;
            }
          // fall through
          case 159: break;
          case 51:
            { return OR;
            }
          // fall through
          case 160: break;
          case 52:
            { return ELLIPSIS;
            }
          // fall through
          case 161: break;
          case 53:
            { return SCIENTIFICNUMBER;
            }
          // fall through
          case 162: break;
          case 54:
            { return HEXNUMBER;
            }
          // fall through
          case 163: break;
          case 55:
            { return AND;
            }
          // fall through
          case 164: break;
          case 56:
            { return STRINGLITERALDOUBLEB;
            }
          // fall through
          case 165: break;
          case 57:
            { return STRINGLITERALSINGLEB;
            }
          // fall through
          case 166: break;
          case 58:
            { return DEF;
            }
          // fall through
          case 167: break;
          case 59:
            { return FOR;
            }
          // fall through
          case 168: break;
          case 60:
            { return LOG;
            }
          // fall through
          case 169: break;
          case 61:
            { return NOT;
            }
          // fall through
          case 170: break;
          case 62:
            { return BOOLEANLITERAL;
            }
          // fall through
          case 171: break;
          case 63:
            { return BOOL;
            }
          // fall through
          case 172: break;
          case 64:
            { return ELIF;
            }
          // fall through
          case 173: break;
          case 65:
            { return ELSE;
            }
          // fall through
          case 174: break;
          case 66:
            { return ENUM;
            }
          // fall through
          case 175: break;
          case 67:
            { return FLAG;
            }
          // fall through
          case 176: break;
          case 68:
            { return FROM;
            }
          // fall through
          case 177: break;
          case 69:
            { return INTM;
            }
          // fall through
          case 178: break;
          case 70:
            { return PASS;
            }
          // fall through
          case 179: break;
          case 71:
            { return PURE;
            }
          // fall through
          case 180: break;
          case 72:
            { return SELF;
            }
          // fall through
          case 181: break;
          case 73:
            { return USES;
            }
          // fall through
          case 182: break;
          case 74:
            { return VIEW;
            }
          // fall through
          case 183: break;
          case 75:
            { return BYTES;
            }
          // fall through
          case 184: break;
          case 76:
            { return BOUND;
            }
          // fall through
          case 185: break;
          case 77:
            { return BREAK;
            }
          // fall through
          case 186: break;
          case 78:
            { return EVENT;
            }
          // fall through
          case 187: break;
          case 79:
            { return RAISE;
            }
          // fall through
          case 188: break;
          case 80:
            { return RANGE;
            }
          // fall through
          case 189: break;
          case 81:
            { return UINTM;
            }
          // fall through
          case 190: break;
          case 82:
            { return MULTILINESTRINGTOKEN;
            }
          // fall through
          case 191: break;
          case 83:
            { return STRING;
            }
          // fall through
          case 192: break;
          case 84:
            { return ASSERT;
            }
          // fall through
          case 193: break;
          case 85:
            { return BYTESM;
            }
          // fall through
          case 194: break;
          case 86:
            { return DEPLOY;
            }
          // fall through
          case 195: break;
          case 87:
            { return HEXLITERAL;
            }
          // fall through
          case 196: break;
          case 88:
            { return IMPORT;
            }
          // fall through
          case 197: break;
          case 89:
            { return PUBLIC;
            }
          // fall through
          case 198: break;
          case 90:
            { return RETURN;
            }
          // fall through
          case 199: break;
          case 91:
            { return STRUCT;
            }
          // fall through
          case 200: break;
          case 92:
            { return HASHMAP;
            }
          // fall through
          case 201: break;
          case 93:
            { return ADDRESS;
            }
          // fall through
          case 202: break;
          case 94:
            { return EXPORTS;
            }
          // fall through
          case 203: break;
          case 95:
            { return EXTCALL;
            }
          // fall through
          case 204: break;
          case 96:
            { return INDEXED;
            }
          // fall through
          case 205: break;
          case 97:
            { return PAYABLE;
            }
          // fall through
          case 206: break;
          case 98:
            { return DYNARRAY;
            }
          // fall through
          case 207: break;
          case 99:
            { return CONSTANT;
            }
          // fall through
          case 208: break;
          case 100:
            { return CONTINUE;
            }
          // fall through
          case 209: break;
          case 101:
            { return EXTERNAL;
            }
          // fall through
          case 210: break;
          case 102:
            { return INTERNAL;
            }
          // fall through
          case 211: break;
          case 103:
            { return IMMUTABLE;
            }
          // fall through
          case 212: break;
          case 104:
            { return INTERFACE;
            }
          // fall through
          case 213: break;
          case 105:
            { return IMPLEMENTS;
            }
          // fall through
          case 214: break;
          case 106:
            { return NONPAYABLE;
            }
          // fall through
          case 215: break;
          case 107:
            { return STATICCALL;
            }
          // fall through
          case 216: break;
          case 108:
            { return INITIALIZES;
            }
          // fall through
          case 217: break;
          case 109:
            { return NONREENTRANT;
            }
          // fall through
          case 218: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
